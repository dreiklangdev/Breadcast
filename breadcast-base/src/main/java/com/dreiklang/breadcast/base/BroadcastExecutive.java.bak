package com.dreiklang.breadcast.base;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.util.Log;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * Created by Huy on 29/01/2018.
 */

public class BroadcastExecutive extends BroadcastReceiver {

    private static final String TAG = BroadcastExecutive.class.getSimpleName();

    private static final Map<String, List<Class>> classes = new HashMap<>();

    private static final Map<Class, List<Object>> receivers = new HashMap<>();

    private static final Map<Class, TypedExecution<?>> executions = new HashMap<>();

    @Override
    public void onReceive(Context context, Intent intent) {
        exec(intent);
    }

    public <T> void addOnAction(String action, Class<T> clazz, TypedExecution<T> execution) {
        List<Class> list = classes.get(action);
        if (list == null) {
            list = new ArrayList<>();
            classes.put(action, list);
        }

        list.add(clazz);
        executions.put(clazz, execution);
    }

    public void addReceiver(Object object) {
        if (object == null) {
            throw new NullPointerException("object must not be null.");
        }
        Class<?> clazz = object.getClass();

        if (clazz.isAnonymousClass()) {
            clazz = clazz.getSuperclass();
        }

        List<Object> objects = receivers.get(clazz);
        if (objects == null) {
            objects = new ArrayList<>();
            receivers.put(clazz, objects);
        }

        objects.add(object);
        Log.d(TAG,"registered " + object + " [" + clazz + "]");
    }

    public Set<String> getActions() {
        return classes.keySet();
    }

    public IntentFilter getIntentFilter() {
        IntentFilter intentFilter = new IntentFilter();
        for (String action : getActions()) {
            intentFilter.addAction(action);
        }
        return intentFilter;
    }

    public void exec(Intent intent) {
        if (intent == null) {
            return;
        }

        String action = intent.getAction();
        List<Class> list = classes.get(action);
        if (list == null) {
            Log.d(TAG, "no class found: " + action);
            return;
        }

        for (Class<?> clazz : list) {
            TypedExecution execution = executions.get(clazz);
            if (execution == null) {
                Log.d(TAG, "no execution found: " + action);
                return;
            }
            List<Object> objects = receivers.get(clazz);
            if (objects == null) {
                Log.d(TAG, "no receiver found: " + action);
                return;
            }
            for (Object obj : objects) {
                execution.exec(obj, intent);
            }
        }
    }

}
